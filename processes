# Include common processes
source $(_decompose-project-root)/.decompose/environment/lib/web/processes
source $(_decompose-project-root)/.decompose/environment/lib/common/processes
source $(_decompose-project-root)/.decompose/environment/lib/backup/processes
source $(_decompose-project-root)/.decompose/environment/lib/docker/processes
source $(_decompose-project-root)/processes

# Declare processes
DECOMPOSE_PROCESSES+=( 'build' 'up' 'import_db' 'explore_db' 'import_files'
  'tail-dev-email' 'drush' 'backup-db' 'explore-php-container' 'install_drupal'
  'export_db'
  "${DECOMPOSE_WEB_PROCESSES[@]}" "${DECOMPOSE_COMMON_PROCESSES[@]}"
  "${DECOMPOSE_BACKUP_PROCESSES[@]}" "${DECOMPOSE_DOCKER_PROCESSES[@]}" )

_decompose-process-explore_db() {
  # Get the name of the database container
  local cid=$(docker-compose ps -q db)

  # Enter mysql
  local password_param=""
  if [ "$PROJECT_DB_PASSWORD" ]; then
    local password_param="-p$PROJECT_DB_PASSWORD"
  fi
  docker exec -it $cid bash -c "mysql -u $PROJECT_DB_USER $password_param -D $PROJECT_DB_DATABASE"
}
_decompose-process-explore_db_help() {
  echo "  Explore database"
}

_decompose-process-explore-php-container() {
  # Get container id
  local cid=$(docker-compose ps -q php)

  # Enter php
  docker exec -u hostuser -it $cid bash

}
_decompose-process-explore-php-container_help() {
  echo "  Explore the php container"
}

_decompose-process-backup-db() {
  # Get the name of the database container
  local cid=$(docker-compose ps -q backup)

  # Run backup
  docker exec $cid duply site_data backup
}
_decompose-process-backup-db_help() {
  echo "  Manually start backup process"
}

_decompose-process-tail-dev-email() {
  # Get the name of the php container
  local db_container_name=$(docker-compose ps -q php)
  # Tail mail.out
  docker exec -it $db_container_name bash -c "tail -f /tmp/mail.out"
}
_decompose-process-tail-dev-email_help() {
  echo "  Tail the dev email messages being sent"
}

_decompose-process-build() {
  _decompose-process-common-build
  _decompose-process_nginx_proxy_build
  _decompose-process-docker-build

  # Start 'source' container to setup source volumes
  docker-compose run --rm source ${PROJECT_BUILD_PATH}/docker_build_context/update_source.bash

  # Add custom build steps here
  # docker-compose run --rm your_container your_build_command

  # Create release
  docker-compose run --rm source ${PROJECT_BUILD_PATH}/docker_build_context/create_release.bash

  # Make 'files' directories writable
  docker-compose run --rm php bash -c "chmod 777 /app/files/*"
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  # Set current release to latest
  docker-compose run --rm -u root source ${PROJECT_BUILD_PATH}/docker_build_context/set_current_release.bash

  _decompose-process-docker-up
  _decompose-process_nginx_proxy_up

  # Clean up old releases
  docker-compose run --rm -u root source ${PROJECT_BUILD_PATH}/docker_build_context/cleanup_releases.bash
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

_decompose-process-drush() {
  # Get the name of the php container
  local cid=$(docker-compose ps -q php)

  docker exec -u hostuser -it $cid drush "$@"
}
_decompose-process-drush_help() {
  echo "  Run drush with parameters"
}

_decompose-process-export_db() {
  # Verify the the first parameter is a file
  local filename="$1"
  if [ -z "$filename" ]; then
    echo "Please specify name of export"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Export file
  docker exec -u hostuser $cid bash -c "drush sql-dump --gzip > /tmp/${filename##*/}.sql.gz"

  # Copy file to container /tmp
  docker cp $cid:/tmp/${filename##*/}.sql.gz $filename.sql.gz

  # Delete /tmp file
  docker exec $cid rm /tmp/${filename##*/}.sql.gz
}
_decompose-process-export_db_help() {
  echo "  Export DB to the specified filename"
  echo "  Export will append '.sql.gz' to filename."
}

_decompose-process-import_db() {
  # Verify the the first parameter is a file
  local sql_file=$1
  if [ ! -e "$sql_file" ]; then
    echo "File '$sql_file' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy file to container /tmp
  docker cp $sql_file $cid:/tmp

  # Import file
  docker exec $cid bash -c "gzip -d < /tmp/${sql_file##*/} | drush sqlc"

  # Delete /tmp file
  docker exec $cid rm /tmp/${sql_file##*/}
}
_decompose-process-import_db_help() {
  echo "  Import DB passed in as a parameter 1"
}

_decompose-process-import_files() {
  # Verify the the first parameter is a file
  local directory=$1
  if [ ! -d "$directory" ]; then
    echo "Directory '$directory' does not exist"
    exit 1
  fi

  # Get the name of the database container
  local cid=$(docker-compose ps -q php)

  # Copy directory to container
  docker cp $directory/. $cid:$PROJECT_SOURCE_CONTAINER_PATH/sites/default/files

  # Give access to everyone for 'files'
  docker exec $cid chmod -R 777 $PROJECT_SOURCE_CONTAINER_PATH/sites/default/files
}
_decompose-process-import_files_help() {
  echo "  Copies 'files' directory to the php container"
}

_decompose-process-install_drupal() {
  echo "Installing Drupal..."
  # Get container id
  local cid=$(docker-compose ps -q php)

  # Install Drupal
  docker exec -u hostuser $cid bash -c "drush si -y standard"

  # Make sure 'files' are owned by 'www-data' user
  docker exec -it $cid bash -c "chown -R www-data:www-data sites/default/files"
}
_decompose-process-install_drupal_help() {
  echo "  Installs Drupal"
}

# vim:syntax=sh
